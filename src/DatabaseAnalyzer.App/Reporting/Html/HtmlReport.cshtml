@using System.Text.RegularExpressions
@using System.Web
@using DatabaseAnalyzer.App.Extensions
@using DatabaseAnalyzer.App.Reporting.Html
@using DatabaseAnalyzer.App.Reporting.Html.Models
@using DatabaseAnalyzer.Common.Contracts
@using DatabaseAnalyzer.Core
@using Microsoft.AspNetCore.Html
@inherits Microsoft.AspNetCore.Mvc.Razor.RazorPage<AnalysisResult>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head>
    <title>Database Analysis Result</title>

    @switch (ViewBag.Theme)
    {
        case ReportTheme.Light:
            @await Html.PartialAsync("/Reporting/Html/Styles-Light.cshtml")
            break;

        default:
            @await Html.PartialAsync("/Reporting/Html/Styles-Dark.cshtml")
            break;
    }
    @await Html.PartialAsync("/Reporting/Html/Styles.cshtml")
</head>
<body>

<div class="statistics-container">

    <div>
        <h2>Database Analysis Result</h2>
        <table class="data-table right-align-2nd-column">
            <tbody>
            <tr>
                <td>Generated at (UTC)</td>
                <td>@DateTime.UtcNow.ToString("u")</td>
            </tr>
            <tr>
                <td>Generated at (Local Time)</td>
                <td>@DateTime.Now.ToString("u")</td>
            </tr>
            <tr>
                <td>Scripts</td>
                <td>@Model.Statistics.TotalScripts</td>
            </tr>
            <tr>
                <td>Scripts Parse Duration</td>
                <td>
                    @if (Model.Statistics.ScriptsParseDuration.TotalSeconds < 0.1)
                    {
                        @("< 0.1s")
                    }
                    else
                    {
                        @($"{Model.Statistics.ScriptsParseDuration.TotalSeconds:F1} s")
                    }
                </td>
            </tr>
            <tr>
                <td>Scripts Analysis Duration</td>
                <td>
                    @if (Model.Statistics.AnalysisDuration.TotalSeconds < 0.1)
                    {
                        @("< 0.1s")
                    }
                    else
                    {
                        @($"{Model.Statistics.AnalysisDuration.TotalSeconds:F1} s")
                    }
                </td>
            </tr>
            </tbody>
        </table>

    </div>

    <div>
        <h2>Summary</h2>
        <table class="data-table right-align-2nd-column">
            <tbody>
            <tr>
                <td>Total Issues</td>
                <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalIssueCount)">
                    @Model.Statistics.TotalIssueCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Total Information Messages</td>
                <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalInformationIssueCount)">
                    @Model.Statistics.TotalInformationIssueCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Total Formatting Issues</td>
                <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalFormattingIssueCount)">
                    @Model.Statistics.TotalFormattingIssueCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Total Warnings</td>
                <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalWarningCount)">@Model.Statistics.TotalWarningCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Total Errors</td>
                <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalErrorCount)">@Model.Statistics.TotalErrorCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Total Missing Indices</td>
                <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalMissingIndexIssueCount)">@Model.Statistics.TotalMissingIndexIssueCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Suppressed Issues</td>
                <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalSuppressedIssueCount)">
                    @Model.Statistics.TotalSuppressedIssueCount
                </span>
                </td>
            </tr>
            <tr>
                <td>Disabled Diagnostics</td>
                <td>
                <span class="@GetCssClassForIssueCount(Model.DisabledDiagnostics.Count)">
                    @Model.DisabledDiagnostics.Count
                </span>

                    @if (Model.DisabledDiagnostics.Count > 0)
                    {
                        <span> â†’ </span>
                        foreach (var diagnosticId in Model.DisabledDiagnostics.Order(StringComparer.OrdinalIgnoreCase))
                        {
                            var diagnosticDefinition = Model.DiagnosticDefinitionsById.GetValueOrDefault(diagnosticId);
                            <div style="margin-left: 5px; display: inline-block">
                                @await Html.PartialAsync("DiagnosticLink.cshtml", new DiagnosticLinkModel(diagnosticId, diagnosticDefinition))
                            </div>
                        }
                    }
                </td>
            </tr>
            </tbody>
        </table>
    </div>

    <div>
        <h2>Top 8 Issues by ID</h2>
        @{
            var topIssues = GetTopIssueTypes(8, Model);
        }
        @if (topIssues.Count == 0)
        {
            <i>None</i>
        }
        else
        {
            <table class="data-table right-align-3rd-column">
                <tbody>
                @foreach (var (diagnosticDefinition, count) in topIssues)
                {
                    <tr>
                        <td>
                            @await Html.PartialAsync("DiagnosticLink.cshtml", new DiagnosticLinkModel(diagnosticDefinition.DiagnosticId, diagnosticDefinition))
                        </td>
                        <td>
                            @diagnosticDefinition.Title
                        </td>
                        <td>
                            @count
                        </td>
                    </tr>
                }

                </tbody>
            </table>
        }
    </div>
</div>

<h2>Issues</h2>
@if (Model.Issues.Count == 0)
{
    <i>None</i>
}
else
{
    <table class="data-table sortable sticky-header-row issue-table">
        <thead>
        <tr>
            <th>Diag</th>
            <th>Type</th>
            <th>Database Name</th>
            <th>Object Name or File Name</th>
            <th>Location</th>
            <th>Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var issue in Model.Issues
                      .OrderBy(a => a.DiagnosticDefinition.DiagnosticId)
                      .ThenBy(a => a.DatabaseName)
                      .ThenBy(a => a.FullObjectNameOrFileName)
                      .ThenBy(a => a.RelativeScriptFilePath)
                      .ThenBy(a => a.CodeRegion))
        {
            <tr>
                <td>
                    @await Html.PartialAsync("DiagnosticLink.cshtml", new DiagnosticLinkModel(issue.DiagnosticDefinition.DiagnosticId, issue.DiagnosticDefinition))
                </td>
                <td><span
                        class="issue-type-@issue.DiagnosticDefinition.IssueType.ToString().ToLower()">@issue.DiagnosticDefinition.IssueType.ToName()</span>
                </td>
                <td>@issue.DatabaseName</td>
                <td>
                    <a href="@MakeFullPath(issue.RelativeScriptFilePath)@CreateJumpToFragmentUrlSuffix(issue)"
                       target="_blank">@issue.FullObjectNameOrFileName</a></td>
                <td>@issue.CodeRegion.ToString().Replace("(", "").Replace(")", "")</td>
                <td>@HighLightCodeParts(issue.Message)</td>
            </tr>
        }
        </tbody>
    </table>
}

<h2>Suppressed Issues</h2>
@if (Model.SuppressedIssues.Count == 0)
{
    <i>None</i>
}
else
{
    <table class="data-table sortable sticky-header-row">
        <thead>
        <tr>
            <th>Diag</th>
            <th>Type</th>
            <th>Object Name or File Name</th>
            <th>Location</th>
            <th>Message</th>
            <th>Suppression Reason</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var issue in Model.SuppressedIssues
                      .OrderBy(a => a.Issue.DiagnosticDefinition.DiagnosticId)
                      .ThenBy(a => a.Issue.FullObjectNameOrFileName)
                      .ThenBy(a => a.Issue.RelativeScriptFilePath)
                      .ThenBy(a => a.Issue.CodeRegion))
        {
            <tr>
                <td>
                    @await Html.PartialAsync("DiagnosticLink.cshtml", new DiagnosticLinkModel(issue.Issue.DiagnosticDefinition.DiagnosticId, issue.Issue.DiagnosticDefinition))
                </td>
                <td><span
                        class="issue-type-@issue.Issue.DiagnosticDefinition.IssueType.ToString().ToLower()">@issue.Issue.DiagnosticDefinition.IssueType.ToName()</span>
                </td>
                <td><a href="@MakeFullPath(issue.Issue.RelativeScriptFilePath)"
                       target="_blank">@issue.Issue.FullObjectNameOrFileName</a></td>
                <td>@issue.Issue.CodeRegion</td>
                <td>@HighLightCodeParts(issue.Issue.Message)</td>
                <td>@issue.Reason</td>
            </tr>
        }
        </tbody>
    </table>
}

@await Html.PartialAsync("/Reporting/Html/Scripts.cshtml")
</body>
</html>

@{
}

@functions
{
    private IReadOnlyDictionary<string, IScriptModel>? _scriptsByRelativePathName;

    private IReadOnlyDictionary<string, IScriptModel> GetScriptsByRelativePathName() => _scriptsByRelativePathName ??= Model.Scripts.ToDictionary(a => a.RelativeScriptFilePath, a => a, StringComparer.OrdinalIgnoreCase);

    static IReadOnlyList<(IDiagnosticDefinition DiagnosticDefinition, int Count)> GetTopIssueTypes(int topCount, AnalysisResult analysisResult)
        => analysisResult.Issues
            .GroupBy(a => a.DiagnosticDefinition.DiagnosticId, StringComparer.OrdinalIgnoreCase)
            .Select(a => (a.First().DiagnosticDefinition, Count: a.Count()))
            .OrderByDescending(a => a.Count)
            .ThenBy(a => a.DiagnosticDefinition.DiagnosticId, StringComparer.OrdinalIgnoreCase)
            .Take(topCount)
            .ToList();

    static readonly Regex CodeBlockFinder = new("`(?<content>[^`]*)`", RegexOptions.Compiled | RegexOptions.NonBacktracking, TimeSpan.FromMilliseconds(100));

    string MakeFullPath(string relativeFilePath) => System.IO.Path.Combine(Model.ScriptsRootDirectoryPath, relativeFilePath);

    static string GetCssClassForIssueCount(int issueCount) => issueCount == 0 ? "stats-has-no-issues" : "stats-has-issues";

    static HtmlString HighLightCodeParts(string message)
    {
        var markup = CodeBlockFinder.Replace(
            HttpUtility.HtmlEncode(message),
            match =>
            {
                var content = match.Groups["content"].Value;
                var encodedContent = HttpUtility.HtmlEncode(content)
                    .Replace("&amp;#39;", "'"); // allow single-quotes

                return $"<pre class=\"code\">{encodedContent}</pre>";
            });

        return new HtmlString(markup);
    }

    string? GetIssueLineContent(IIssue issue)
    {
        var scriptsByRelativePathName = GetScriptsByRelativePathName();
        if (!scriptsByRelativePathName.TryGetValue(issue.RelativeScriptFilePath, out var script))
        {
            return null;
        }

        return script.Contents.Split('\n')
            .Skip(issue.CodeRegion.Begin.Line - 1) // line numbers are one-based
            .FirstOrDefault()
            ?.TrimEnd('\r');
    }

    string CreateJumpToFragmentUrlSuffix(IIssue issue)
    {
        var lineContents = GetIssueLineContent(issue);
        return string.IsNullOrWhiteSpace(lineContents)
            ? string.Empty
            : $"#:~:text={Uri.EscapeDataString(lineContents)}";
    }
}
