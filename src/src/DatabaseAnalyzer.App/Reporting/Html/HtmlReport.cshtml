@using System.Text.RegularExpressions
@using System.Web
@using DatabaseAnalyzer.App.Extensions
@using DatabaseAnalyzer.App.Reporting.Html
@using Microsoft.AspNetCore.Html
@inherits Microsoft.AspNetCore.Mvc.Razor.RazorPage<DatabaseAnalyzer.Core.AnalysisResult>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head title="Database Analysis Result">

    @switch (ViewBag.Theme)
    {
        case ReportTheme.Light:
            @await Html.PartialAsync("/Reporting/Html/Styles-Light.cshtml")
            break;

        default:
            @await Html.PartialAsync("/Reporting/Html/Styles-Dark.cshtml")
            break;
    }
    @await Html.PartialAsync("/Reporting/Html/Styles.cshtml")
</head>
<body>

<h1>Database Analysis Result</h1>

<div class="info-box">
    Generated at (UTC): @DateTime.UtcNow.ToString("u")<br/>
    Generated at (Local Time): @DateTime.Now.ToString("u")<br/>
</div>

<h1>Summary</h1>
<div class="overview">
    <table class="data-table">
        <tbody>
        <tr>
            <td>Total Issues</td>
            <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalIssueCount)">
                    @Model.Statistics.TotalIssueCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Total Information Messages</td>
            <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalInformationIssueCount)">
                    @Model.Statistics.TotalInformationIssueCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Total Formatting Issues</td>
            <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalFormattingIssueCount)">
                    @Model.Statistics.TotalFormattingIssueCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Total Warnings</td>
            <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalWarningCount)">@Model.Statistics.TotalWarningCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Total Errors</td>
            <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalErrorCount)">@Model.Statistics.TotalErrorCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Total Missing Indices</td>
            <td>
                <span
                    class="@GetCssClassForIssueCount(Model.Statistics.TotalMissingIndexIssueCount)">@Model.Statistics.TotalMissingIndexIssueCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Suppressed Issues</td>
            <td>
                <span class="@GetCssClassForIssueCount(Model.Statistics.TotalSuppressedIssueCount)">
                    @Model.Statistics.TotalSuppressedIssueCount
                </span>
            </td>
        </tr>
        <tr>
            <td>Disabled Diagnostics</td>
            <td>
                <span class="@GetCssClassForIssueCount(Model.DisabledDiagnostics.Count)">
                    @Model.DisabledDiagnostics.Count
                </span>

                @if (Model.DisabledDiagnostics.Count > 0)
                {
                    <span> â†’ </span>
                    foreach (var diagnosticId in Model.DisabledDiagnostics.Order(StringComparer.OrdinalIgnoreCase))
                    {
                        var url = Model.DiagnosticDefinitionsById.GetValueOrDefault(diagnosticId);
                        if (url is null)
                        {
                            <span style="margin-left: 5px" title="No help link available">@diagnosticId</span>
                        }
                        else
                        {
                            <a href="https://github.com/AcidJunkie303/TSqlScriptAnalyzer/blob/main/docs/diagnostics/@(diagnosticId).md"
                               style="margin-left: 5px"
                               target="_blank">@diagnosticId</a>
                        }
                    }
                }
            </td>
        </tr>
        </tbody>
    </table>
</div>

<h1>Issues</h1>
@if (Model.Issues.Count == 0)
{
    <i>None</i>
}
else
{
    <table class="data-table sortable">
        <thead>
        <tr>
            <th>Diag</th>
            <th>Type</th>
            <th>Database Name</th>
            <th>Object Name or File Name</th>
            <th>Location</th>
            <th>Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var issue in Model.Issues
                      .OrderBy(a => a.DiagnosticDefinition.DiagnosticId)
                      .ThenBy(a => a.DatabaseName)
                      .ThenBy(a => a.FullObjectNameOrFileName)
                      .ThenBy(a => a.RelativeScriptFilePath)
                      .ThenBy(a => a.CodeRegion))
        {
            <tr>
                <td><a href="@issue.DiagnosticDefinition.HelpUrl"
                       target="_blank">@issue.DiagnosticDefinition.DiagnosticId</a></td>
                <td><span
                        class="issue-type-@issue.DiagnosticDefinition.IssueType.ToString().ToLower()">@issue.DiagnosticDefinition.IssueType.ToName()</span>
                </td>
                <td>@issue.DatabaseName</td>
                <td><a href="@MakeFullPath(issue.RelativeScriptFilePath)"
                       target="_blank">@issue.FullObjectNameOrFileName</a></td>
                <td>@issue.CodeRegion.ToString().Replace("(", "").Replace(")", "")</td>
                <td>@HighLightCodeParts(issue.Message)</td>
            </tr>
        }
        </tbody>
    </table>
}

<h1>Suppressed Issues</h1>
@if (Model.SuppressedIssues.Count == 0)
{
    <i>None</i>
}
else
{
    <table class="data-table sortable">
        <thead>
        <tr>
            <th>Diag</th>
            <th>Type</th>
            <th>Object Name or File Name</th>
            <th>Location</th>
            <th>Message</th>
            <th>Suppression Reason</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var issue in Model.SuppressedIssues
                      .OrderBy(a => a.Issue.DiagnosticDefinition.DiagnosticId)
                      .ThenBy(a => a.Issue.FullObjectNameOrFileName)
                      .ThenBy(a => a.Issue.RelativeScriptFilePath)
                      .ThenBy(a => a.Issue.CodeRegion))
        {
            <tr>
                <td><a href="@issue.Issue.DiagnosticDefinition.HelpUrl"
                       target="_blank">@issue.Issue.DiagnosticDefinition.DiagnosticId</a></td>
                <td><span
                        class="issue-type-@issue.Issue.DiagnosticDefinition.IssueType.ToString().ToLower()">@issue.Issue.DiagnosticDefinition.IssueType.ToName()</span>
                </td>
                <td><a href="@MakeFullPath(issue.Issue.RelativeScriptFilePath)"
                       target="_blank">@issue.Issue.FullObjectNameOrFileName</a></td>
                <td>@issue.Issue.CodeRegion</td>
                <td>@HighLightCodeParts(issue.Issue.Message)</td>
                <td>@issue.Reason</td>
            </tr>
        }
        </tbody>
    </table>
}

@await Html.PartialAsync("/Reporting/Html/Scripts.cshtml")
</body>
</html>

@functions
{
    static readonly Regex CodeBlockFinder = new("`(?<content>[^`]*)`", RegexOptions.Compiled | RegexOptions.NonBacktracking, TimeSpan.FromMilliseconds(100));

    string MakeFullPath(string relativeFilePath) => System.IO.Path.Combine(Model.ScriptsRootDirectoryPath, relativeFilePath);

    static string GetCssClassForIssueCount(int issueCount) => issueCount == 0 ? "stats-has-no-issues" : "stats-has-issues";

    static HtmlString HighLightCodeParts(string message)
    {
        var markup = CodeBlockFinder.Replace(
            HttpUtility.HtmlEncode(message),
            match =>
            {
                var content = match.Groups["content"].Value;
                var encodedContent = HttpUtility.HtmlEncode(content)
                    .Replace("&amp;#39;", "'"); // allow single-quotes

                return $"<pre class=\"code\">{encodedContent}</pre>";
            });

        return new HtmlString(markup);
    }
}
